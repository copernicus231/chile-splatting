(function(){const l=document.createElement("link").relList;if(l&&l.supports&&l.supports("modulepreload"))return;for(const U of document.querySelectorAll('link[rel="modulepreload"]'))t(U);new MutationObserver(U=>{for(const W of U)if(W.type==="childList")for(const B of W.addedNodes)B.tagName==="LINK"&&B.rel==="modulepreload"&&t(B)}).observe(document,{childList:!0,subtree:!0});function F(U){const W={};return U.integrity&&(W.integrity=U.integrity),U.referrerPolicy&&(W.referrerPolicy=U.referrerPolicy),U.crossOrigin==="use-credentials"?W.credentials="include":U.crossOrigin==="anonymous"?W.credentials="omit":W.credentials="same-origin",W}function t(U){if(U.ep)return;U.ep=!0;const W=F(U);fetch(U.href,W)}})();class s{constructor(l=0,F=0,t=0){this.x=l,this.y=F,this.z=t}equals(l){return this.x===l.x&&this.y===l.y&&this.z===l.z}add(l){return typeof l=="number"?new s(this.x+l,this.y+l,this.z+l):new s(this.x+l.x,this.y+l.y,this.z+l.z)}subtract(l){return typeof l=="number"?new s(this.x-l,this.y-l,this.z-l):new s(this.x-l.x,this.y-l.y,this.z-l.z)}multiply(l){return typeof l=="number"?new s(this.x*l,this.y*l,this.z*l):new s(this.x*l.x,this.y*l.y,this.z*l.z)}lerp(l,F){return new s(this.x+(l.x-this.x)*F,this.y+(l.y-this.y)*F,this.z+(l.z-this.z)*F)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(l){return Math.sqrt((this.x-l.x)**2+(this.y-l.y)**2+(this.z-l.z)**2)}normalize(){const l=this.length();return new s(this.x/l,this.y/l,this.z/l)}flat(){return[this.x,this.y,this.z]}clone(){return new s(this.x,this.y,this.z)}}class Y{constructor(l=0,F=0,t=0,U=1){this.x=l,this.y=F,this.z=t,this.w=U}equals(l){return this.x===l.x&&this.y===l.y&&this.z===l.z&&this.w===l.w}normalize(){const l=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new Y(this.x/l,this.y/l,this.z/l,this.w/l)}multiply(l){const F=this.w,t=this.x,U=this.y,W=this.z,B=l.w,R=l.x,V=l.y,d=l.z;return new Y(F*R+t*B+U*d-W*V,F*V-t*d+U*B+W*R,F*d+t*V-U*R+W*B,F*B-t*R-U*V-W*d)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new Y(this.x,this.y,this.z,this.w)}static FromEuler(l){const F=l.x/2,t=l.y/2,U=l.z/2,W=Math.cos(t),B=Math.sin(t),R=Math.cos(F),V=Math.sin(F),d=Math.cos(U),n=Math.sin(U);return new Y(W*V*d+B*R*n,B*R*d-W*V*n,W*R*n-B*V*d,W*R*d+B*V*n)}toEuler(){const l=2*(this.w*this.x+this.y*this.z),F=1-2*(this.x*this.x+this.y*this.y),t=Math.atan2(l,F);let U;const W=2*(this.w*this.y-this.z*this.x);U=Math.abs(W)>=1?Math.sign(W)*Math.PI/2:Math.asin(W);const B=2*(this.w*this.z+this.x*this.y),R=1-2*(this.y*this.y+this.z*this.z),V=Math.atan2(B,R);return new s(t,U,V)}static FromMatrix3(l){const F=l.buffer,t=F[0]+F[4]+F[8];let U,W,B,R;if(t>0){const V=.5/Math.sqrt(t+1);R=.25/V,U=(F[7]-F[5])*V,W=(F[2]-F[6])*V,B=(F[3]-F[1])*V}else if(F[0]>F[4]&&F[0]>F[8]){const V=2*Math.sqrt(1+F[0]-F[4]-F[8]);R=(F[7]-F[5])/V,U=.25*V,W=(F[1]+F[3])/V,B=(F[2]+F[6])/V}else if(F[4]>F[8]){const V=2*Math.sqrt(1+F[4]-F[0]-F[8]);R=(F[2]-F[6])/V,U=(F[1]+F[3])/V,W=.25*V,B=(F[5]+F[7])/V}else{const V=2*Math.sqrt(1+F[8]-F[0]-F[4]);R=(F[3]-F[1])/V,U=(F[2]+F[6])/V,W=(F[5]+F[7])/V,B=.25*V}return new Y(U,W,B,R)}}class tF{constructor(){const l=new Map;this.addEventListener=(F,t)=>{l.has(F)||l.set(F,new Set),l.get(F).add(t)},this.removeEventListener=(F,t)=>{l.has(F)&&l.get(F).delete(t)},this.hasEventListener=(F,t)=>!!l.has(F)&&l.get(F).has(t),this.dispatchEvent=F=>{if(l.has(F.type))for(const t of l.get(F.type))t(F)}}}class ZF extends tF{constructor(){super(),this._position=new s,this._rotation=new Y,this._changeEvent={type:"change"}}get position(){return this._position}set position(l){this._position.equals(l)||(this._position=l,this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(l){this._rotation.equals(l)||(this._rotation=l,this.dispatchEvent(this._changeEvent))}}class X{constructor(l=1,F=0,t=0,U=0,W=1,B=0,R=0,V=0,d=1){this.buffer=[l,F,t,U,W,B,R,V,d]}equals(l){if(this.buffer.length!==l.buffer.length)return!1;if(this.buffer===l.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==l.buffer[F])return!1;return!0}multiply(l){const F=this.buffer,t=l.buffer;return new X(t[0]*F[0]+t[3]*F[1]+t[6]*F[2],t[1]*F[0]+t[4]*F[1]+t[7]*F[2],t[2]*F[0]+t[5]*F[1]+t[8]*F[2],t[0]*F[3]+t[3]*F[4]+t[6]*F[5],t[1]*F[3]+t[4]*F[4]+t[7]*F[5],t[2]*F[3]+t[5]*F[4]+t[8]*F[5],t[0]*F[6]+t[3]*F[7]+t[6]*F[8],t[1]*F[6]+t[4]*F[7]+t[7]*F[8],t[2]*F[6]+t[5]*F[7]+t[8]*F[8])}clone(){const l=this.buffer;return new X(l[0],l[1],l[2],l[3],l[4],l[5],l[6],l[7],l[8])}static Eye(l=1){return new X(l,0,0,0,l,0,0,0,l)}static Diagonal(l){return new X(l.x,0,0,0,l.y,0,0,0,l.z)}static RotationFromQuaternion(l){return new X(1-2*l.y*l.y-2*l.z*l.z,2*l.x*l.y-2*l.z*l.w,2*l.x*l.z+2*l.y*l.w,2*l.x*l.y+2*l.z*l.w,1-2*l.x*l.x-2*l.z*l.z,2*l.y*l.z-2*l.x*l.w,2*l.x*l.z-2*l.y*l.w,2*l.y*l.z+2*l.x*l.w,1-2*l.x*l.x-2*l.y*l.y)}static RotationFromEuler(l){const F=Math.cos(l.x),t=Math.sin(l.x),U=Math.cos(l.y),W=Math.sin(l.y),B=Math.cos(l.z),R=Math.sin(l.z);return new X(U*B+W*t*R,-U*R+W*t*B,W*F,F*R,F*B,-t,-W*B+U*t*R,W*R+U*t*B,U*F)}}class x{constructor(l=1,F=0,t=0,U=0,W=0,B=1,R=0,V=0,d=0,n=0,Q=1,c=0,Z=0,h=0,G=0,i=1){this.buffer=[l,F,t,U,W,B,R,V,d,n,Q,c,Z,h,G,i]}equals(l){if(this.buffer.length!==l.buffer.length)return!1;if(this.buffer===l.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==l.buffer[F])return!1;return!0}multiply(l){const F=this.buffer,t=l.buffer;return new x(t[0]*F[0]+t[1]*F[4]+t[2]*F[8]+t[3]*F[12],t[0]*F[1]+t[1]*F[5]+t[2]*F[9]+t[3]*F[13],t[0]*F[2]+t[1]*F[6]+t[2]*F[10]+t[3]*F[14],t[0]*F[3]+t[1]*F[7]+t[2]*F[11]+t[3]*F[15],t[4]*F[0]+t[5]*F[4]+t[6]*F[8]+t[7]*F[12],t[4]*F[1]+t[5]*F[5]+t[6]*F[9]+t[7]*F[13],t[4]*F[2]+t[5]*F[6]+t[6]*F[10]+t[7]*F[14],t[4]*F[3]+t[5]*F[7]+t[6]*F[11]+t[7]*F[15],t[8]*F[0]+t[9]*F[4]+t[10]*F[8]+t[11]*F[12],t[8]*F[1]+t[9]*F[5]+t[10]*F[9]+t[11]*F[13],t[8]*F[2]+t[9]*F[6]+t[10]*F[10]+t[11]*F[14],t[8]*F[3]+t[9]*F[7]+t[10]*F[11]+t[11]*F[15],t[12]*F[0]+t[13]*F[4]+t[14]*F[8]+t[15]*F[12],t[12]*F[1]+t[13]*F[5]+t[14]*F[9]+t[15]*F[13],t[12]*F[2]+t[13]*F[6]+t[14]*F[10]+t[15]*F[14],t[12]*F[3]+t[13]*F[7]+t[14]*F[11]+t[15]*F[15])}clone(){const l=this.buffer;return new x(l[0],l[1],l[2],l[3],l[4],l[5],l[6],l[7],l[8],l[9],l[10],l[11],l[12],l[13],l[14],l[15])}}class QF extends ZF{constructor(l=new s(0,0,-5),F=new Y,t=1132,U=1132,W=.1,B=100){super();const R=()=>{const V=X.RotationFromQuaternion(this.rotation).buffer,d=this.position.flat(),n=[[V[0],V[1],V[2],0],[V[3],V[4],V[5],0],[V[6],V[7],V[8],0],[-d[0]*V[0]-d[1]*V[3]-d[2]*V[6],-d[0]*V[1]-d[1]*V[4]-d[2]*V[7],-d[0]*V[2]-d[1]*V[5]-d[2]*V[8],1]].flat();return new x(...n)};this.position=l,this.rotation=F,this.fx=t,this.fy=U,this.near=W,this.far=B,this.projectionMatrix=new x,this.viewMatrix=new x,this.viewProj=new x,this.update=(V,d)=>{this.projectionMatrix=new x(2*this.fx/V,0,0,0,0,-2*this.fy/d,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this.viewMatrix=R(),this.viewProj=this.projectionMatrix.multiply(this.viewMatrix)}}}class D extends tF{constructor(){super();const l=new Float32Array(1),F=new Int32Array(l.buffer),t=B=>{l[0]=B;const R=F[0],V=R>>23&255;let d,n=8388607&R;return V==0?d=0:V<113?(d=0,n|=8388608,n>>=113-V,16777216&n&&(d=1,n=0)):V<142?d=V-112:(d=31,n=0),(R>>31&1)<<15|d<<10|n>>13},U=(B,R)=>(t(B)|t(R)<<16)>>>0,W={type:"change"};this._data=new Uint32Array(0),this._vertexCount=0,this._width=2048,this._height=0,this._positions=new Float32Array(0),this._rotations=new Float32Array(0),this._scales=new Float32Array(0),this.setData=B=>{this._vertexCount=B.length/D.RowLength,this._height=Math.ceil(2*this._vertexCount/this._width),this._data=new Uint32Array(this._width*this._height*4),this._positions=new Float32Array(3*this._vertexCount),this._rotations=new Float32Array(4*this._vertexCount),this._scales=new Float32Array(3*this._vertexCount);const R=new Float32Array(B.buffer),V=new Uint8Array(B.buffer),d=new Uint8Array(this._data.buffer),n=new Float32Array(this._data.buffer);for(let Q=0;Q<this._vertexCount;Q++){this._positions[3*Q+0]=R[8*Q+0],this._positions[3*Q+1]=R[8*Q+1],this._positions[3*Q+2]=R[8*Q+2],this._rotations[4*Q+0]=(V[32*Q+28+0]-128)/128,this._rotations[4*Q+1]=(V[32*Q+28+1]-128)/128,this._rotations[4*Q+2]=(V[32*Q+28+2]-128)/128,this._rotations[4*Q+3]=(V[32*Q+28+3]-128)/128,this._scales[3*Q+0]=R[8*Q+3+0],this._scales[3*Q+1]=R[8*Q+3+1],this._scales[3*Q+2]=R[8*Q+3+2],n[8*Q+0]=this._positions[3*Q+0],n[8*Q+1]=this._positions[3*Q+1],n[8*Q+2]=this._positions[3*Q+2],d[4*(8*Q+7)+0]=V[32*Q+24+0],d[4*(8*Q+7)+1]=V[32*Q+24+1],d[4*(8*Q+7)+2]=V[32*Q+24+2],d[4*(8*Q+7)+3]=V[32*Q+24+3];const c=X.RotationFromQuaternion(new Y(this._rotations[4*Q+1],this._rotations[4*Q+2],this._rotations[4*Q+3],-this._rotations[4*Q+0])),Z=X.Diagonal(new s(this._scales[3*Q+0],this._scales[3*Q+1],this._scales[3*Q+2])).multiply(c).buffer,h=[Z[0]*Z[0]+Z[3]*Z[3]+Z[6]*Z[6],Z[0]*Z[1]+Z[3]*Z[4]+Z[6]*Z[7],Z[0]*Z[2]+Z[3]*Z[5]+Z[6]*Z[8],Z[1]*Z[1]+Z[4]*Z[4]+Z[7]*Z[7],Z[1]*Z[2]+Z[4]*Z[5]+Z[7]*Z[8],Z[2]*Z[2]+Z[5]*Z[5]+Z[8]*Z[8]];this._data[8*Q+4]=U(4*h[0],4*h[1]),this._data[8*Q+5]=U(4*h[2],4*h[3]),this._data[8*Q+6]=U(4*h[4],4*h[5])}this.dispatchEvent(W)},this.translate=B=>{const R=new Float32Array(this._data.buffer);for(let V=0;V<this._vertexCount;V++)this._positions[3*V+0]+=B.x,this._positions[3*V+1]+=B.y,this._positions[3*V+2]+=B.z,R[8*V+0]=this._positions[3*V+0],R[8*V+1]=this._positions[3*V+1],R[8*V+2]=this._positions[3*V+2];this.dispatchEvent(W)},this.rotate=B=>{const R=X.RotationFromQuaternion(B).buffer,V=new Float32Array(this._data.buffer);for(let d=0;d<this._vertexCount;d++){const n=this._positions[3*d+0],Q=this._positions[3*d+1],c=this._positions[3*d+2];this._positions[3*d+0]=R[0]*n+R[1]*Q+R[2]*c,this._positions[3*d+1]=R[3]*n+R[4]*Q+R[5]*c,this._positions[3*d+2]=R[6]*n+R[7]*Q+R[8]*c,V[8*d+0]=this._positions[3*d+0],V[8*d+1]=this._positions[3*d+1],V[8*d+2]=this._positions[3*d+2];const Z=new Y(this._rotations[4*d+1],this._rotations[4*d+2],this._rotations[4*d+3],this._rotations[4*d+0]),h=B.multiply(Z);this._rotations[4*d+1]=h.x,this._rotations[4*d+2]=h.y,this._rotations[4*d+3]=h.z,this._rotations[4*d+0]=h.w;const G=X.RotationFromQuaternion(new Y(this._rotations[4*d+1],this._rotations[4*d+2],this._rotations[4*d+3],-this._rotations[4*d+0])),i=X.Diagonal(new s(this._scales[3*d+0],this._scales[3*d+1],this._scales[3*d+2])).multiply(G).buffer,m=[i[0]*i[0]+i[3]*i[3]+i[6]*i[6],i[0]*i[1]+i[3]*i[4]+i[6]*i[7],i[0]*i[2]+i[3]*i[5]+i[6]*i[8],i[1]*i[1]+i[4]*i[4]+i[7]*i[7],i[1]*i[2]+i[4]*i[5]+i[7]*i[8],i[2]*i[2]+i[5]*i[5]+i[8]*i[8]];this._data[8*d+4]=U(4*m[0],4*m[1]),this._data[8*d+5]=U(4*m[2],4*m[3]),this._data[8*d+6]=U(4*m[4],4*m[5])}this.dispatchEvent(W)},this.scale=B=>{const R=new Float32Array(this._data.buffer);for(let V=0;V<this.vertexCount;V++){this._positions[3*V+0]*=B.x,this._positions[3*V+1]*=B.y,this._positions[3*V+2]*=B.z,R[8*V+0]=this._positions[3*V+0],R[8*V+1]=this._positions[3*V+1],R[8*V+2]=this._positions[3*V+2],this._scales[3*V+0]*=B.x,this._scales[3*V+1]*=B.y,this._scales[3*V+2]*=B.z;const d=X.RotationFromQuaternion(new Y(this._rotations[4*V+1],this._rotations[4*V+2],this._rotations[4*V+3],-this._rotations[4*V+0])),n=X.Diagonal(new s(this._scales[3*V+0],this._scales[3*V+1],this._scales[3*V+2])).multiply(d).buffer,Q=[n[0]*n[0]+n[3]*n[3]+n[6]*n[6],n[0]*n[1]+n[3]*n[4]+n[6]*n[7],n[0]*n[2]+n[3]*n[5]+n[6]*n[8],n[1]*n[1]+n[4]*n[4]+n[7]*n[7],n[1]*n[2]+n[4]*n[5]+n[7]*n[8],n[2]*n[2]+n[5]*n[5]+n[8]*n[8]];this._data[8*V+4]=U(4*Q[0],4*Q[1]),this._data[8*V+5]=U(4*Q[2],4*Q[3]),this._data[8*V+6]=U(4*Q[4],4*Q[5])}this.dispatchEvent(W)},this.limitBox=(B,R,V,d,n,Q)=>{if(B>=R)throw new Error(`xMin (${B}) must be smaller than xMax (${R})`);if(V>=d)throw new Error(`yMin (${V}) must be smaller than yMax (${d})`);if(n>=Q)throw new Error(`zMin (${n}) must be smaller than zMax (${Q})`);const c=new Uint8Array(this._vertexCount);for(let h=0;h<this._vertexCount;h++){const G=this._positions[3*h+0],i=this._positions[3*h+1],m=this._positions[3*h+2];G>=B&&G<=R&&i>=V&&i<=d&&m>=n&&m<=Q&&(c[h]=1)}let Z=0;for(let h=0;h<this._vertexCount;h++)c[h]!==0&&(this._data[8*Z+0]=this._data[8*h+0],this._data[8*Z+1]=this._data[8*h+1],this._data[8*Z+2]=this._data[8*h+2],this._data[8*Z+3]=this._data[8*h+3],this._data[8*Z+4]=this._data[8*h+4],this._data[8*Z+5]=this._data[8*h+5],this._data[8*Z+6]=this._data[8*h+6],this._data[8*Z+7]=this._data[8*h+7],this._positions[3*Z+0]=this._positions[3*h+0],this._positions[3*Z+1]=this._positions[3*h+1],this._positions[3*Z+2]=this._positions[3*h+2],this._rotations[4*Z+0]=this._rotations[4*h+0],this._rotations[4*Z+1]=this._rotations[4*h+1],this._rotations[4*Z+2]=this._rotations[4*h+2],this._rotations[4*Z+3]=this._rotations[4*h+3],this._scales[3*Z+0]=this._scales[3*h+0],this._scales[3*Z+1]=this._scales[3*h+1],this._scales[3*Z+2]=this._scales[3*h+2],Z+=1);this._height=Math.ceil(2*Z/this._width),this._vertexCount=Z,this._data=new Uint32Array(this._data.buffer,0,this._width*this._height*4),this._positions=new Float32Array(this._positions.buffer,0,3*Z),this._rotations=new Float32Array(this._rotations.buffer,0,4*Z),this._scales=new Float32Array(this._scales.buffer,0,3*Z),this.dispatchEvent(W)},this.saveToFile=B=>{if(!document)return;const R=new Uint8Array(this._vertexCount*D.RowLength),V=new Float32Array(R.buffer),d=new Uint8Array(R.buffer),n=new Uint8Array(this._data.buffer);for(let Z=0;Z<this._vertexCount;Z++)V[8*Z+0]=this._positions[3*Z+0],V[8*Z+1]=this._positions[3*Z+1],V[8*Z+2]=this._positions[3*Z+2],d[32*Z+24+0]=n[4*(8*Z+7)+0],d[32*Z+24+1]=n[4*(8*Z+7)+1],d[32*Z+24+2]=n[4*(8*Z+7)+2],d[32*Z+24+3]=n[4*(8*Z+7)+3],V[8*Z+3+0]=this._scales[3*Z+0],V[8*Z+3+1]=this._scales[3*Z+1],V[8*Z+3+2]=this._scales[3*Z+2],d[32*Z+28+0]=128*this._rotations[4*Z+0]+128&255,d[32*Z+28+1]=128*this._rotations[4*Z+1]+128&255,d[32*Z+28+2]=128*this._rotations[4*Z+2]+128&255,d[32*Z+28+3]=128*this._rotations[4*Z+3]+128&255;const Q=new Blob([R.buffer],{type:"application/octet-stream"}),c=document.createElement("a");c.download=B,c.href=URL.createObjectURL(Q),c.click()}}get data(){return this._data}get vertexCount(){return this._vertexCount}get width(){return this._width}get height(){return this._height}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}}D.RowLength=32;class nF{static async LoadAsync(l,F,t){const U=await fetch(l,{mode:"cors",credentials:"omit"});if(U.status!=200)throw new Error(U.status+" Unable to load "+U.url);const W=U.body.getReader(),B=parseInt(U.headers.get("content-length")),R=new Uint8Array(B);let V=0;for(;;){const{done:d,value:n}=await W.read();if(d)break;R.set(n,V),V+=n.length,t==null||t(V/B)}F.setData(R)}static async LoadFromFileAsync(l,F,t){const U=new FileReader;U.onload=W=>{const B=new Uint8Array(W.target.result);F.setData(B)},U.onprogress=W=>{t==null||t(W.loaded/W.total)},U.readAsArrayBuffer(l),await new Promise(W=>{U.onloadend=()=>{W()}})}}function RF(S,l,F){var t=l===void 0?null:l,U=function(V,d){var n=atob(V);if(d){for(var Q=new Uint8Array(n.length),c=0,Z=n.length;c<Z;++c)Q[c]=n.charCodeAt(c);return String.fromCharCode.apply(null,new Uint16Array(Q.buffer))}return n}(S,F!==void 0&&F),W=U.indexOf(`
`,10)+1,B=U.substring(W)+(t?"//# sourceMappingURL="+t:""),R=new Blob([B],{type:"application/javascript"});return URL.createObjectURL(R)}var q,$,FF,P,BF=(q="",$=null,FF=!1,function(S){return P=P||RF(q,$,FF),new Worker(P,S)});class WF{constructor(l=1){let F,t,U,W=0,B=!1;this.init=(R,V)=>{W=0,B=!0,F=R,t=R.gl.getUniformLocation(V,"u_useDepthFade"),F.gl.uniform1i(t,1),U=R.gl.getUniformLocation(V,"u_depthFade"),F.gl.uniform1f(U,W)},this.render=()=>{B&&(W=Math.min(W+.01*l,1),W>=1&&(B=!1,F.gl.uniform1i(t,0)),F.gl.uniform1f(U,W))}}}class eF{constructor(l=null,F=null){const t=l||document.createElement("canvas");l||(t.style.display="block",t.style.boxSizing="border-box",t.style.width="100%",t.style.height="100%",t.style.margin="0",t.style.padding="0",document.body.appendChild(t)),t.style.background="#000",this.domElement=t;const U=t.getContext("webgl2",{antialias:!1});this.gl=U;const W=F||[];let B,R,V,d,n,Q,c,Z,h,G,i,m,b,a;F||W.push(new WF);let I=!1;this.resize=()=>{const k=t.clientWidth,y=t.clientHeight;t.width===k&&t.height===y||this.setSize(k,y)},this.setSize=(k,y)=>{t.width=k,t.height=y,R&&(U.viewport(0,0,t.width,t.height),R.update(t.width,t.height),c=U.getUniformLocation(Q,"projection"),U.uniformMatrix4fv(c,!1,R.projectionMatrix.buffer),Z=U.getUniformLocation(Q,"viewport"),U.uniform2fv(Z,new Float32Array([t.width,t.height])))};const z=()=>{V=new BF;const k={positions:B.positions,vertexCount:B.vertexCount};V.postMessage({scene:k}),U.viewport(0,0,t.width,t.height),d=U.createShader(U.VERTEX_SHADER),U.shaderSource(d,`#version 300 es
precision highp float;
precision highp int;

uniform highp usampler2D u_texture;
uniform mat4 projection, view;
uniform vec2 focal;
uniform vec2 viewport;

uniform bool u_useDepthFade;
uniform float u_depthFade;

in vec2 position;
in int index;

out vec4 vColor;
out vec2 vPosition;

void main () {
    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);
    vec4 cam = view * vec4(uintBitsToFloat(cen.xyz), 1);
    vec4 pos2d = projection * cam;

    float clip = 1.2 * pos2d.w;
    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {
        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);
        return;
    }


    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);
    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);
    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);

    mat3 J = mat3(
        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), 
        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), 
        0., 0., 0.
    );

    mat3 T = transpose(mat3(view)) * J;
    mat3 cov2d = transpose(T) * Vrk * T;

    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;
    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));
    float lambda1 = mid + radius, lambda2 = mid - radius;

    if(lambda2 < 0.0) return;
    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));
    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;
    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);

    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;
    vPosition = position;

    float scalingFactor = 1.0;

    if(u_useDepthFade) {
        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;
        float near = 0.1; float far = 100.0;
        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));
        float start = max(normalizedDepth - 0.1, 0.0);
        float end = min(normalizedDepth + 0.1, 1.0);
        scalingFactor = clamp((u_depthFade - start) / (end - start), 0.0, 1.0);
    }

    vec2 vCenter = vec2(pos2d) / pos2d.w;
    gl_Position = vec4(
        vCenter 
        + position.x * majorAxis * scalingFactor / viewport 
        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);

}
`),U.compileShader(d),U.getShaderParameter(d,U.COMPILE_STATUS)||console.error(U.getShaderInfoLog(d)),n=U.createShader(U.FRAGMENT_SHADER),U.shaderSource(n,`#version 300 es
precision highp float;

in vec4 vColor;
in vec2 vPosition;

out vec4 fragColor;

void main () {
    float A = -dot(vPosition, vPosition);
    if (A < -4.0) discard;
    float B = exp(A) * vColor.a;
    fragColor = vec4(B * vColor.rgb, B);
}
`),U.compileShader(n),U.getShaderParameter(n,U.COMPILE_STATUS)||console.error(U.getShaderInfoLog(n)),Q=U.createProgram(),U.attachShader(Q,d),U.attachShader(Q,n),U.linkProgram(Q),U.useProgram(Q),U.getProgramParameter(Q,U.LINK_STATUS)||console.error(U.getProgramInfoLog(Q)),U.disable(U.DEPTH_TEST),U.enable(U.BLEND),U.blendFuncSeparate(U.ONE_MINUS_DST_ALPHA,U.ONE,U.ONE_MINUS_DST_ALPHA,U.ONE),U.blendEquationSeparate(U.FUNC_ADD,U.FUNC_ADD),R.update(t.width,t.height),c=U.getUniformLocation(Q,"projection"),U.uniformMatrix4fv(c,!1,R.projectionMatrix.buffer),Z=U.getUniformLocation(Q,"viewport"),U.uniform2fv(Z,new Float32Array([t.width,t.height])),h=U.getUniformLocation(Q,"focal"),U.uniform2fv(h,new Float32Array([R.fx,R.fy])),G=U.getUniformLocation(Q,"view"),U.uniformMatrix4fv(G,!1,R.viewMatrix.buffer);const y=new Float32Array([-2,-2,2,-2,2,2,-2,2]);a=U.createBuffer(),U.bindBuffer(U.ARRAY_BUFFER,a),U.bufferData(U.ARRAY_BUFFER,y,U.STATIC_DRAW),m=U.getAttribLocation(Q,"position"),U.enableVertexAttribArray(m),U.vertexAttribPointer(m,2,U.FLOAT,!1,0,0);const C=U.createTexture();U.bindTexture(U.TEXTURE_2D,C),i=U.getUniformLocation(Q,"u_texture"),U.uniform1i(i,0);const w=U.createBuffer();b=U.getAttribLocation(Q,"index"),U.enableVertexAttribArray(b),U.bindBuffer(U.ARRAY_BUFFER,w),U.vertexAttribIPointer(b,1,U.INT,0,0),U.vertexAttribDivisor(b,1),U.bindTexture(U.TEXTURE_2D,C),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_S,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_WRAP_T,U.CLAMP_TO_EDGE),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MIN_FILTER,U.NEAREST),U.texParameteri(U.TEXTURE_2D,U.TEXTURE_MAG_FILTER,U.NEAREST),U.texImage2D(U.TEXTURE_2D,0,U.RGBA32UI,B.width,B.height,0,U.RGBA_INTEGER,U.UNSIGNED_INT,B.data),U.activeTexture(U.TEXTURE0),U.bindTexture(U.TEXTURE_2D,C);for(const H of W)H.init(this,Q);V.onmessage=H=>{if(H.data.depthIndex){const{depthIndex:f}=H.data;U.bindBuffer(U.ARRAY_BUFFER,w),U.bufferData(U.ARRAY_BUFFER,f,U.STATIC_DRAW)}},I=!0},g=()=>{I&&this.dispose(),z()};this.render=(k,y)=>{if(k===B&&y===R||(I&&this.dispose(),R=y,k!==B&&(B&&B.removeEventListener("change",g),B=k,B.addEventListener("change",g)),z()),R.update(t.width,t.height),V.postMessage({viewProj:R.viewProj}),B.vertexCount>0){for(const C of W)C.render();U.uniformMatrix4fv(G,!1,R.viewMatrix.buffer),U.clear(U.COLOR_BUFFER_BIT),U.drawArraysInstanced(U.TRIANGLE_FAN,0,4,B.vertexCount)}else U.clear(U.COLOR_BUFFER_BIT)},this.dispose=()=>{V.terminate(),U.deleteShader(d),U.deleteShader(n),U.deleteProgram(Q),U.deleteBuffer(a),U.deleteBuffer(void 0),U.deleteBuffer(void 0),U.deleteBuffer(void 0),U.deleteBuffer(void 0),I=!1},this.resize()}}class iF{constructor(l,F,t=.5,U=.5,W=5,B=!0,R=new s){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{},this.attach=()=>{},this.detach=()=>{};let V=R.clone(),d=V.clone(),n=t,Q=U,c=W,Z=!1,h=!1,G=0,i=0,m=0;const b={};let a=null,I=!1;const z=()=>{if(!a||I)return;const e=a.rotation.toEuler();n=-e.y,Q=-e.x;const J=a.position.x-c*Math.sin(n)*Math.cos(Q),o=a.position.y+c*Math.sin(Q),N=a.position.z+c*Math.cos(n)*Math.cos(Q);d=new s(J,o,N)};this.attach=e=>{a&&this.detach(),a=e,a.addEventListener("change",z)},this.detach=()=>{a&&(a.removeEventListener("change",z),a=null)},this.attach(l),this.setCameraTarget=e=>{if(!a)return;const J=e.x-a.position.x,o=e.y-a.position.y,N=e.z-a.position.z;c=Math.sqrt(J*J+o*o+N*N),Q=Math.atan2(o,Math.sqrt(J*J+N*N)),n=-Math.atan2(J,N),d=new s(e.x,e.y,e.z)};const g=()=>.1+.9*(c-this.minZoom)/(this.maxZoom-this.minZoom),k=e=>{b[e.code]=!0,e.code==="ArrowUp"&&(b.KeyW=!0),e.code==="ArrowDown"&&(b.KeyS=!0),e.code==="ArrowLeft"&&(b.KeyA=!0),e.code==="ArrowRight"&&(b.KeyD=!0)},y=e=>{b[e.code]=!1,e.code==="ArrowUp"&&(b.KeyW=!1),e.code==="ArrowDown"&&(b.KeyS=!1),e.code==="ArrowLeft"&&(b.KeyA=!1),e.code==="ArrowRight"&&(b.KeyD=!1)},C=e=>{p(e),Z=!0,h=e.button===2,i=e.clientX,m=e.clientY,window.addEventListener("mouseup",w)},w=e=>{p(e),Z=!1,h=!1,window.removeEventListener("mouseup",w)},H=e=>{if(p(e),!Z||!a)return;const J=e.clientX-i,o=e.clientY-m;if(h){const N=g(),v=-J*this.panSpeed*.01*N,M=-o*this.panSpeed*.01*N,r=X.RotationFromQuaternion(a.rotation).buffer,E=new s(r[0],r[3],r[6]),u=new s(r[1],r[4],r[7]);d=d.add(E.multiply(v)),d=d.add(u.multiply(M))}else n-=J*this.orbitSpeed*.003,Q+=o*this.orbitSpeed*.003,Q=Math.min(Math.max(Q,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);i=e.clientX,m=e.clientY},f=e=>{p(e);const J=g();c+=e.deltaY*this.zoomSpeed*.025*J,c=Math.min(Math.max(c,this.minZoom),this.maxZoom)},L=e=>{if(p(e),e.touches.length===1)Z=!0,h=!1,i=e.touches[0].clientX,m=e.touches[0].clientY,G=0;else if(e.touches.length===2){Z=!0,h=!0,i=(e.touches[0].clientX+e.touches[1].clientX)/2,m=(e.touches[0].clientY+e.touches[1].clientY)/2;const J=e.touches[0].clientX-e.touches[1].clientX,o=e.touches[0].clientY-e.touches[1].clientY;G=Math.sqrt(J*J+o*o)}},A=e=>{p(e),Z=!1,h=!1},_=e=>{if(p(e),Z&&a)if(h){const J=g(),o=e.touches[0].clientX-e.touches[1].clientX,N=e.touches[0].clientY-e.touches[1].clientY,v=Math.sqrt(o*o+N*N);c+=(G-v)*this.zoomSpeed*.1*J,c=Math.min(Math.max(c,this.minZoom),this.maxZoom),G=v;const M=(e.touches[0].clientX+e.touches[1].clientX)/2,r=(e.touches[0].clientY+e.touches[1].clientY)/2,E=M-i,u=r-m,T=X.RotationFromQuaternion(a.rotation).buffer,K=new s(T[0],T[3],T[6]),dF=new s(T[1],T[4],T[7]);d=d.add(K.multiply(-E*this.panSpeed*.025*J)),d=d.add(dF.multiply(-u*this.panSpeed*.025*J)),i=M,m=r}else{const J=e.touches[0].clientX-i,o=e.touches[0].clientY-m;n-=J*this.orbitSpeed*.003,Q+=o*this.orbitSpeed*.003,Q=Math.min(Math.max(Q,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),i=e.touches[0].clientX,m=e.touches[0].clientY}},O=(e,J,o)=>(1-o)*e+o*J;this.update=()=>{if(!a)return;I=!0,t=O(t,n,this.dampening),U=O(U,Q,this.dampening),W=O(W,c,this.dampening),V=V.lerp(d,this.dampening);const e=V.x+W*Math.sin(t)*Math.cos(U),J=V.y-W*Math.sin(U),o=V.z-W*Math.cos(t)*Math.cos(U);a.position=new s(e,J,o);const N=V.subtract(a.position).normalize(),v=Math.asin(-N.y),M=Math.atan2(N.x,N.z);a.rotation=Y.FromEuler(new s(v,M,0));const r=.025,E=.01,u=X.RotationFromQuaternion(a.rotation).buffer,T=new s(-u[2],-u[5],-u[8]),K=new s(u[0],u[3],u[6]);b.KeyS&&(d=d.add(T.multiply(r))),b.KeyW&&(d=d.subtract(T.multiply(r))),b.KeyA&&(d=d.subtract(K.multiply(r))),b.KeyD&&(d=d.add(K.multiply(r))),b.KeyE&&(n+=E),b.KeyQ&&(n-=E),b.KeyR&&(Q+=E),b.KeyF&&(Q-=E),I=!1};const p=e=>{e.preventDefault(),e.stopPropagation()};this.dispose=()=>{F.removeEventListener("dragenter",p),F.removeEventListener("dragover",p),F.removeEventListener("dragleave",p),F.removeEventListener("contextmenu",p),F.removeEventListener("mousedown",C),F.removeEventListener("mousemove",H),F.removeEventListener("wheel",f),F.removeEventListener("touchstart",L),F.removeEventListener("touchend",A),F.removeEventListener("touchmove",_),B&&(window.removeEventListener("keydown",k),window.removeEventListener("keyup",y))},B&&(window.addEventListener("keydown",k),window.addEventListener("keyup",y)),F.addEventListener("dragenter",p),F.addEventListener("dragover",p),F.addEventListener("dragleave",p),F.addEventListener("contextmenu",p),F.addEventListener("mousedown",C),F.addEventListener("mousemove",H),F.addEventListener("wheel",f),F.addEventListener("touchstart",L),F.addEventListener("touchend",A),F.addEventListener("touchmove",_),this.update()}}const j=document.getElementById("canvas"),hF=document.getElementById("progress-dialog"),cF=document.getElementById("progress-indicator"),lF=new eF(j),UF=new D,VF=new QF,aF=new iF(VF,j);async function sF(){const S="molino-7k.splat";await nF.LoadAsync(S,UF,t=>cF.value=t*100),hF.close();const l=()=>{lF.setSize(j.clientWidth,j.clientHeight)},F=()=>{aF.update(),lF.render(UF,VF),requestAnimationFrame(F)};l(),window.addEventListener("resize",l),requestAnimationFrame(F)}sF();
